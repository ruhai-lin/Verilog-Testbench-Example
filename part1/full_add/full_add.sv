/* Generated by Yosys 0.39 (git sha1 00338082b, aarch64-apple-darwin21.4-clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* hdlname = "full_add" *)
(* src = "full_add.soln.sv:1.8-1.16" *)
module full_add(b_i, carry_i, carry_o, sum_o, a_i);
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "full_add.soln.sv:2.16-2.19" *)
  input a_i;
  wire a_i;
  (* src = "full_add.soln.sv:9.9-9.12" *)
  wire a_w;
  (* src = "full_add.soln.sv:3.16-3.19" *)
  input b_i;
  wire b_i;
  (* src = "full_add.soln.sv:4.16-4.23" *)
  input carry_i;
  wire carry_i;
  (* src = "full_add.soln.sv:5.17-5.24" *)
  output carry_o;
  wire carry_o;
  (* src = "full_add.soln.sv:8.9-8.16" *)
  wire carry_w;
  (* src = "full_add.soln.sv:6.17-6.22" *)
  output sum_o;
  wire sum_o;
  assign _1_ = b_i & carry_i;
  assign _2_ = a_i & ~(_0_);
  assign carry_o = _2_ | _1_;
  assign _0_ = ~(b_i ^ carry_i);
  assign sum_o = ~(_0_ ^ a_i);
  assign a_w = carry_i;
  assign carry_w = a_i;

`ifdef FORMAL
assert property ((sum_o === (a_i ^ b_i ^ carry_i)) && (carry_o === ((a_i & b_i) | (carry_i & (a_i ^ b_i)))));
`endif

endmodule
